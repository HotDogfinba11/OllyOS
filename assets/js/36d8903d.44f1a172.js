"use strict";(self.webpackChunkprotonaosp=self.webpackChunkprotonaosp||[]).push([[109],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=c(r),d=n,m=f["".concat(l,".").concat(d)]||f[d]||p[d]||o;return r?a.createElement(m,i(i({ref:t},u),{},{components:r})):a.createElement(m,i({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},940:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return f}});var a=r(3117),n=r(102),o=(r(7294),r(3905)),i=["components"],s={sidebar_position:30},l="SafetyNet",c={unversionedId:"developers/details/safetynet",id:"developers/details/safetynet",isDocsHomePage:!1,title:"SafetyNet",description:"Olly's OS uses a variety of workarounds to pass Google's SafetyNet attestation checks without breaking any parts of the system.",source:"@site/docs/developers/details/safetynet.md",sourceDirName:"developers/details",slug:"/developers/details/safetynet",permalink:"/OllyOS/developers/details/safetynet",tags:[],version:"current",lastUpdatedAt:1646996740,formattedLastUpdatedAt:"3/11/2022",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"Official device trees",permalink:"/OllyOS/developers/official-device-trees"},next:{title:"March",permalink:"/OllyOS/versions/march"}},u=[{value:"Verified boot state",id:"verified-boot-state",children:[],level:2},{value:"Build fingerprint",id:"build-fingerprint",children:[],level:2},{value:"Hardware-backed attestation",id:"hardware-backed-attestation",children:[],level:2}],p={toc:u};function f(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"safetynet"},"SafetyNet"),(0,o.kt)("p",null,"Olly\u2019s OS uses a variety of workarounds to pass Google\u2019s SafetyNet attestation checks without breaking any parts of the system."),(0,o.kt)("p",null,"Please note that these workarounds may break at any time, and custom ROMs will not be able to pass SafetyNet forever. They are a temporary solution at best."),(0,o.kt)("h2",{id:"verified-boot-state"},"Verified boot state"),(0,o.kt)("p",null,"SafetyNet checks some system properties passed by the bootloader (via the kernel command line) to determine whether the bootloader is unlocked, and if so, fails the basic integrity check."),(0,o.kt)("p",null,"Olly\u2019s OS sets fake values for these properties at boot. These values override the ones from the kernel command line, so Google Play Services is made unaware of the unlocked bootloader."),(0,o.kt)("p",null,"Commits:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/PixelOS-Bluecross/platform_system_core/commit/7082c7571c9af160810b41aa6787874a5cf3c5ef"},"init: Set properties to make SafetyNet pass"))),(0,o.kt)("h2",{id:"build-fingerprint"},"Build fingerprint"),(0,o.kt)("p",null,"SafetyNet\u2019s CTS profile check verifies the build profile against Google\u2019s database of CTS-certified builds. It passes if the following properties match a known certified build:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Device codename"),(0,o.kt)("li",{parentName:"ul"},"System & vendor security patch levels"),(0,o.kt)("li",{parentName:"ul"},"Build fingerprint")),(0,o.kt)("p",null,"Spoofing the build fingerprint is the intuitive solution, but it causes issues because Android uses build fingerprint changes as a signal to clear and rebuild several caches. If the build fingerprint always stays the same (or only changes once per month), system updates that change resource IDs or native libraries embedded in APKs can cause strange issues. This forces users to wipe data on every update and results in poor UX."),(0,o.kt)("p",null,"Instead of overriding the system fingerprint for all builds, ProtonAOSP only reports the spoofed fingerprint to Google Play Services. This helps make SafetyNet pass without causing issues with the system itself."),(0,o.kt)("p",null,"Commits:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/PixelOS-Bluecross/platform_frameworks_base/commit/f34bef86680232394b50a7a1adf570db9ec87438"},"Spoof build fingerprint for Google Play Services"))),(0,o.kt)("h2",{id:"hardware-backed-attestation"},"Hardware-backed attestation"),(0,o.kt)("p",null,"On January 12, 2021, Google rolled out an update to make SafetyNet opportunistically use ",(0,o.kt)("a",{parentName:"p",href:"https://developer.android.com/training/articles/security-key-attestation"},"hardware-backed cryptographic attestation")," if the device supports it. The signed attestation payloads cannot be forged without an exploit, but we can take advantage of the fact that the use of hardware-backed attestation is optimistic and prevent Google Play Services from using it."),(0,o.kt)("p",null,"On September 2, 2021, Google started enforcing hardware-backed attestation based on device information. Olly\u2019s OS circumvents this by altering the device model name."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/kdrag0n/safetynet-fix"},"Universal SafetyNet Fix")," is the portable version of this workaround for all ROMs."),(0,o.kt)("p",null,"Commits:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/PixelOS-Bluecross/platform_frameworks_base/commit/36e84a5580536d14d544cccc253188a16a988c89"},"keystore: Block key attestation for SafetyNet")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/PixelOS-Bluecross/platform_frameworks_base/commit/0eb527844cec218dacb5f3c286ad0bfb3d67d27b"},"Alter model name to avoid SafetyNet HW attestation enforcement"))))}f.isMDXComponent=!0}}]);